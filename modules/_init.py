# Метод __init__ запускается, как только объект класса реализуется. Этот метод полезен
# для осуществления разного рода инициализации, необходимой для данного объекта. Об-
# ратите внимание на двойные подчёркивания в начале и в конце имени.

class Person:
    def __init__(self, name):
        self.name = name

    def sayHi(self):
        print('Привет! Меня зовут', self.name)

p = Person('Swaroop')
p.sayHi()

# Этот короткий пример можно также записать как Person('Swaroop').sayHi()

# Здесь мы определяем метод __init__ так, чтобы он принимал параметр name
# (наряду с обычным self). Далее мы создаём новое поле с именем name. Об-
# ратите внимание, что это две разные переменные, даже несмотря на то, что
# они обе названы name. Это не проблема, так как точка в выражении self.name
# обозначает, что существует нечто с именем «name», являющееся частью объ-
# екта «self», и другое name – локальная переменная. Поскольку мы в явном виде
# указываем, к которому имени мы обращаемся, путаницы не возникнет.
# Важно отметить, что при создании нового экземпляра класса мы не вызываем
# метод __init__ явным образом, а передаём аргументы в скобках после имени
# этого класса. В этом и заключается специальная роль данного метода.
# После этого мы получаем возможность использовать поле self.name в наших
# методах, что и продемонстрировано в методе sayHi.

